Input: arr = [3,1,2,4]
Output: 17
Explanation: 
Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.
Sum is 17.


class Solution {
    public int sumSubarrayMins(int[] arr) {
        long sum = 0;
        int mod = (int)1e9 + 7;
        int[] nse = NSE(arr);
        int[] pse = PSE(arr);

        for(int i = 0 ; i<arr.length ; i++){
            int left = i - pse[i];
            int right = nse[i] - i;

            long freq = (long)left*right;
            long ans = (freq*arr[i]) % mod ; 
            sum = (sum + ans) % mod;
        }
        return (int)sum;
    }
    private int[] NSE(int[] arr){
        int n = arr.length;
        int[] ans = new int[n];
        Stack<Integer> s = new Stack<>();

        for(int i = n-1 ; i>=0 ; i--){
            while(!s.isEmpty() && arr[s.peek()] >= arr[i]){
                s.pop();
            }

            ans[i] = s.isEmpty() ? n : s.peek();
            s.push(i);
        }
        return ans;
    }

    private int[] PSE(int[] arr){
        int n = arr.length;
        int[] ans = new int[n];
        Stack<Integer> s = new Stack<>();

        for(int i = 0; i < n ; i++){
            while(!s.isEmpty() && arr[s.peek()] > arr[i]){
                s.pop();
            }

            ans[i] = s.isEmpty() ? -1 : s.peek();
            s.push(i);
        } 
        return ans;
    }
}
