https://www.geeksforgeeks.org/dsa/maximum-size-rectangle-binary-sub-matrix-1s/
Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 6

class Solution {
    public int maximalRectangle(char[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        int ans = 0;
        int[] maxi = new int[n];

        for(int i = 0; i<m ; i++){
            for(int j = 0 ; j<n ; j++){
                if(matrix[i][j] == '1'){
                    maxi[j]++;
                }
                else{
                    maxi[j] = 0;
                }
            }
            ans = Math.max(ans,area(maxi));
        }
        return ans;
    }

    private int area(int[] heights){
        int n = heights.length;
        int ans = 0;
        Stack<Integer> st = new Stack<>();
        //int left; int curr;

        for(int i = 0 ; i<n ; i++){
            while(!st.isEmpty() && heights[st.peek()] >= heights[i]){
                int left = st.pop();
                int width = !st.isEmpty() ? i - st.peek() - 1 : i;
                ans = Math.max(ans,heights[left] * width);
            }
            st.push(i);
        }

        while(!st.isEmpty()){
            int left = st.pop();
            int curr = !st.isEmpty() ? n - st.peek() - 1 : n;
            ans = Math.max(ans , curr*heights[left]);
        }
        return ans;
    }
}
