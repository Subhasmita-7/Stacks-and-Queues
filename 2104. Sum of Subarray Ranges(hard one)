class Solution {
    public long subArrayRanges(int[] nums) {
       return maxisubarray(nums) - minisubarray(nums);
      
    }

    private int[] NSE(int[] nums){
        int n = nums.length;
        Stack<Integer> st = new Stack<>();
        int[] ans = new int[n];
        for(int i = n-1 ; i>=0 ; i--){
            while(!st.isEmpty() && nums[st.peek()] >= nums[i]){
                st.pop();
            }
            ans[i] = st.isEmpty() ? n : st.peek();
            st.push(i);
        }
        return ans;
    }

    private int[] NGE(int[] nums){
        int n = nums.length;
        Stack<Integer> st = new Stack<>();
        int[] ans = new int[n];
        for(int i = n-1 ; i>=0 ; i--){
            while(!st.isEmpty() && nums[st.peek()] <= nums[i]){
                st.pop();
            }
            ans[i] = st.isEmpty() ? n : st.peek();
            st.push(i);
        }
        return ans;
    }

    private int[] PSE(int[] nums){
        int n = nums.length;
        Stack<Integer> st = new Stack<>();
        int[] ans = new int[n];
        for(int i = 0 ; i<n ; i++){
            while(!st.isEmpty() && nums[st.peek()] > nums[i]){
                st.pop();
            }
            ans[i] = st.isEmpty() ? -1 : st.peek();
            st.push(i);
        }
        return ans;
    }

    private int[] PGE(int[] nums){
        int n = nums.length;
        Stack<Integer> st = new Stack<>();
        int[] ans = new int[n];
        for(int i = 0 ; i<n ; i++){
            while(!st.isEmpty() && nums[st.peek()] < nums[i]){
                st.pop();
            }
            ans[i] = st.isEmpty() ? -1 : st.peek();
            st.push(i);
        }
        return ans;
    }

    private long maxisubarray(int[] nums){
        int n = nums.length;
        int[] nge = NGE(nums);
        int[] pge = PGE(nums);
        long sum = 0;
        for(int i = 0 ; i<n ; i++){
            int left = i - pge[i];
            int right = nge[i] - i;
            long freq = (long)left*right;
            long ans = freq*nums[i];
            sum = sum + ans;
        }
        return sum;
    }
    private long minisubarray(int[] nums){
        int n = nums.length;
        int[] nse = NSE(nums);
        int[] pse = PSE(nums);
        long sum = 0;
        for(int i = 0 ; i< n ; i++){
            int left = i-pse[i];
            int right = nse[i]-i;
            long freq = (long)left*right;
            long ans = freq*nums[i];
            sum = sum+ ans;
        }
        return sum;
    }
}
